"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ ChatGPT –º–æ–¥—É–ª–µ
–í–∫–ª—é—á–∞–µ—Ç —Å–∂–∞—Ç–∏–µ, —Ä–∞—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–ª—è Vision API
"""
import base64
import io
import math
from typing import Tuple, Optional
from PIL import Image
import logging

logger = logging.getLogger(__name__)

class ImageProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è Vision API"""
    
    def __init__(self, max_size_mb: int = 10, max_resolution: int = 1024, auto_resize: bool = True):
        self.max_size_mb = max_size_mb
        self.max_resolution = max_resolution
        self.auto_resize = auto_resize
    
    def estimate_tokens(self, width: int, height: int, detail: str = "low") -> int:
        """
        –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Based on OpenAI documentation:
        - detail="low": ~85 tokens
        - detail="high": variable based on image size
        """
        if detail == "low":
            return 85
        
        # –î–ª—è detail="high" —Ä–∞—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ OpenAI
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ç–∞–π–ª—ã 512x512
        tiles_width = math.ceil(width / 512)
        tiles_height = math.ceil(height / 512)
        total_tiles = tiles_width * tiles_height
        
        # –ö–∞–∂–¥—ã–π —Ç–∞–π–ª = 170 —Ç–æ–∫–µ–Ω–æ–≤ + –±–∞–∑–æ–≤—ã–µ 85 —Ç–æ–∫–µ–Ω–æ–≤
        tokens = total_tiles * 170 + 85
        return tokens
    
    def estimate_cost_usd(self, tokens: int, model: str = "gpt-4o") -> float:
        """
        –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD
        
        –¶–µ–Ω—ã –Ω–∞ —è–Ω–≤–∞—Ä—å 2025 (–∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤ input):
        """
        # –¶–µ–Ω—ã –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤ (input)
        prices = {
            "gpt-4o": 0.0025,
            "gpt-4o-mini": 0.00015,
            "gpt-4-vision-preview": 0.01,
            "gpt-4-turbo": 0.01,
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è –º–æ–¥–µ–ª–∏
        price_per_1k = prices.get(model, 0.01)  # Fallback –Ω–∞ —Å–∞–º—É—é –¥–æ—Ä–æ–≥—É—é
        
        return (tokens / 1000) * price_per_1k
    
    def resize_image(self, image_bytes: bytes, max_resolution: int) -> Tuple[bytes, int, int]:
        """
        –°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        
        Returns:
            (resized_bytes, new_width, new_height)
        """
        try:
            image = Image.open(io.BytesIO(image_bytes))
            original_width, original_height = image.size
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            if max(original_width, original_height) <= max_resolution:
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                return image_bytes, original_width, original_height
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            if original_width > original_height:
                new_width = max_resolution
                new_height = int((original_height * max_resolution) / original_width)
            else:
                new_height = max_resolution
                new_width = int((original_width * max_resolution) / original_height)
            
            # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            resized_image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            output_buffer = io.BytesIO()
            format_name = image.format or 'JPEG'
            if format_name == 'JPEG':
                resized_image.save(output_buffer, format=format_name, quality=85, optimize=True)
            else:
                resized_image.save(output_buffer, format=format_name, optimize=True)
            
            resized_bytes = output_buffer.getvalue()
            output_buffer.close()
            
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ: {original_width}x{original_height} ‚Üí {new_width}x{new_height}")
            return resized_bytes, new_width, new_height
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                image = Image.open(io.BytesIO(image_bytes))
                return image_bytes, image.size[0], image.size[1]
            except:
                # –ï—Å–ª–∏ –¥–∞–∂–µ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                return image_bytes, 1024, 1024
    
    def prepare_image_for_api(self, image_bytes: bytes, detail: str = "low") -> Tuple[str, dict]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Vision API
        
        Returns:
            (base64_image, image_info_dict)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            original_image = Image.open(io.BytesIO(image_bytes))
            original_width, original_height = original_image.size
            original_size_mb = len(image_bytes) / (1024 * 1024)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–∂–∏–º–∞—Ç—å
            processed_bytes = image_bytes
            final_width, final_height = original_width, original_height
            was_resized = False
            
            if self.auto_resize and original_size_mb > self.max_size_mb:
                processed_bytes, final_width, final_height = self.resize_image(
                    image_bytes, self.max_resolution
                )
                was_resized = True
            elif self.auto_resize and max(original_width, original_height) > self.max_resolution:
                processed_bytes, final_width, final_height = self.resize_image(
                    image_bytes, self.max_resolution
                )
                was_resized = True
            
            # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
            base64_image = base64.b64encode(processed_bytes).decode('utf-8')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
            estimated_tokens = self.estimate_tokens(final_width, final_height, detail)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            image_info = {
                'original_size': f"{original_width}x{original_height}",
                'final_size': f"{final_width}x{final_height}",
                'was_resized': was_resized,
                'original_size_mb': round(original_size_mb, 2),
                'final_size_mb': round(len(processed_bytes) / (1024 * 1024), 2),
                'estimated_tokens': estimated_tokens,
                'detail': detail,
            }
            
            return base64_image, image_info
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            raise
    
    def get_cost_warning(self, image_info: dict, model: str = "gpt-4o") -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞—Ç—Ä–∞—Ç–∞—Ö
        """
        estimated_cost = self.estimate_cost_usd(image_info['estimated_tokens'], model)
        
        warning = f"üí∞ **–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** ~${estimated_cost:.4f}\n"
        warning += f"üéØ **–¢–æ–∫–µ–Ω–æ–≤:** ~{image_info['estimated_tokens']}\n"
        warning += f"üìè **–†–∞–∑–º–µ—Ä:** {image_info['final_size']}"
        
        if image_info['was_resized']:
            warning += f" (—Å–∂–∞—Ç–æ —Å {image_info['original_size']})"
        
        if image_info['detail'] == "high":
            warning += f"\n‚ö†Ô∏è **–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ** - –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Ä–æ–∂–µ!"
        
        return warning

def create_image_processor(config: dict) -> ImageProcessor:
    """–°–æ–∑–¥–∞–µ—Ç ImageProcessor –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è"""
    return ImageProcessor(
        max_size_mb=config['max_image_size_mb'],
        max_resolution=config['max_image_resolution'],
        auto_resize=True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ
    ) 