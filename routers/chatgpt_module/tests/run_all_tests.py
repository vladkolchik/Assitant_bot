#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–∞–º—è—Ç–∏ ChatGPT –º–æ–¥—É–ª—è
–£–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ä–∞–∑—É
"""

import sys
import os
import asyncio
import traceback
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–∞–º—è—Ç–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ ChatGPT –º–æ–¥—É–ª—è")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    tests = [
        ("–°–µ—Å—Å–∏–æ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å", "test_session_memory"),
        ("–ì–∏–±—Ä–∏–¥–Ω–∞—è –ø–∞–º—è—Ç—å", "test_hybrid_memory"),
        ("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤", "test_memory_toggle")
    ]
    
    results = {}
    
    for test_name, test_module in tests:
        print(f"\nüß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê: {test_name}")
        print("-" * 40)
        
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
            if test_module == "test_session_memory":
                from test_session_memory import test_session_memory
                test_session_memory()
                results[test_name] = "‚úÖ –£–°–ü–ï–®–ù–û"
                
            elif test_module == "test_hybrid_memory":
                from test_hybrid_memory import test_hybrid_memory
                await test_hybrid_memory()
                results[test_name] = "‚úÖ –£–°–ü–ï–®–ù–û"
                
            elif test_module == "test_memory_toggle":
                from test_memory_toggle import test_memory_toggle
                await test_memory_toggle()
                results[test_name] = "‚úÖ –£–°–ü–ï–®–ù–û"
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï {test_name}:")
            print(f"   {str(e)}")
            print(f"   –¢—Ä–µ–π—Å: {traceback.format_exc()}")
            results[test_name] = f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}"
        
        print("-" * 40)
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    success_count = 0
    for test_name, result in results.items():
        print(f"{result:<30} {test_name}")
        if "‚úÖ" in result:
            success_count += 1
    
    print("-" * 60)
    print(f"üéØ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{len(tests)}")
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    if success_count == len(tests):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
    
    print("=" * 60)

if __name__ == "__main__":
    try:
        asyncio.run(run_all_tests())
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc() 