"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ChatGPT + Whisper –º–æ–¥—É–ª—è
"""
import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –º–æ–¥—É–ª—è
module_dir = Path(__file__).parent
env_path = module_dir / '.env'

if env_path.exists():
    load_dotenv(env_path)
else:
    print(f"‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {module_dir}")
    print(f"üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è")

# ===== CHATGPT –ù–ê–°–¢–†–û–ô–ö–ò =====
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "o4-mini")
OPENAI_MAX_TOKENS = int(os.getenv("OPENAI_MAX_TOKENS", "1000"))
OPENAI_MAX_COMPLETION_TOKENS = int(os.getenv("OPENAI_MAX_COMPLETION_TOKENS", "5000"))
OPENAI_TEMPERATURE = float(os.getenv("OPENAI_TEMPERATURE", "0.7"))

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
if any(OPENAI_MODEL.startswith(prefix) for prefix in ['o1-', 'o3-', 'o4-']):
    # –î–ª—è reasoning-–º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º max_completion_tokens (–∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    EFFECTIVE_MAX_TOKENS = OPENAI_MAX_COMPLETION_TOKENS if OPENAI_MAX_COMPLETION_TOKENS > OPENAI_MAX_TOKENS else max(OPENAI_MAX_TOKENS, 5000)
else:
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º max_tokens
    EFFECTIVE_MAX_TOKENS = OPENAI_MAX_TOKENS

# ===== WHISPER –ù–ê–°–¢–†–û–ô–ö–ò =====
WHISPER_MODE = os.getenv("WHISPER_MODE", "api").lower()  # "api" –∏–ª–∏ "local"
WHISPER_MODEL = os.getenv("WHISPER_MODEL", "whisper-1")  # –î–ª—è API
LOCAL_WHISPER_MODEL = os.getenv("LOCAL_WHISPER_MODEL", "base")  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ
WHISPER_LANGUAGE = os.getenv("WHISPER_LANGUAGE", "ru")  # –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

# ===== –ê–£–î–ò–û –ù–ê–°–¢–†–û–ô–ö–ò =====
MAX_AUDIO_SIZE_MB = int(os.getenv("MAX_AUDIO_SIZE_MB", "25"))
MAX_AUDIO_DURATION_SEC = int(os.getenv("MAX_AUDIO_DURATION_SEC", "300"))
AUDIO_TEMP_DIR = os.getenv("AUDIO_TEMP_DIR", "temp_audio")
AUTO_CLEANUP_TEMP_FILES = os.getenv("AUTO_CLEANUP_TEMP_FILES", "true").lower() == "true"

# ===== VISION API –ù–ê–°–¢–†–û–ô–ö–ò (–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) =====
VISION_ENABLED = os.getenv("VISION_ENABLED", "true").lower() == "true"
VISION_QUALITY = os.getenv("VISION_QUALITY", "low").lower()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ VISION_DETAIL
MAX_IMAGE_SIZE_MB = int(os.getenv("MAX_IMAGE_SIZE_MB", "10"))
IMAGE_QUALITY = int(os.getenv("IMAGE_QUALITY", "85"))  # –î–æ–±–∞–≤–ª–µ–Ω–æ: –∫–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è JPEG
MAX_IMAGE_RESOLUTION = int(os.getenv("MAX_IMAGE_RESOLUTION", "1024"))
VISION_COST_WARNINGS = os.getenv("VISION_COST_WARNINGS", "true").lower() == "true"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ SHOW_COST_WARNINGS

# ===== MEM0 –ü–ê–ú–Ø–¢–¨ –ù–ê–°–¢–†–û–ô–ö–ò =====
MEM0_API_KEY = os.getenv("MEM0_API_KEY")
MEM0_ENABLED = os.getenv("MEM0_ENABLED", "false").lower() == "true" and MEM0_API_KEY is not None

# –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
REQUIRED_VARS = {
    "OPENAI_API_KEY": OPENAI_API_KEY,
}

missing_vars = [name for name, value in REQUIRED_VARS.items() if not value]
if missing_vars:
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env: {', '.join(missing_vars)}")
    print(f"üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è")

# –í–∞–ª–∏–¥–∞—Ü–∏—è WHISPER_MODE
if WHISPER_MODE not in ["api", "local"]:
    print(f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ WHISPER_MODE: {WHISPER_MODE}")
    print("üìã –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 'api' –∏–ª–∏ 'local'")
    WHISPER_MODE = "api"  # Fallback –Ω–∞ API

# –í–∞–ª–∏–¥–∞—Ü–∏—è VISION –Ω–∞—Å—Ç—Ä–æ–µ–∫
if VISION_QUALITY not in ["low", "high"]:
    print(f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ VISION_QUALITY: {VISION_QUALITY}")
    print("üìã –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 'low' –∏–ª–∏ 'high'")
    VISION_QUALITY = "low"  # Fallback –Ω–∞ —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Ä–µ–∂–∏–º

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Vision API –º–æ–¥–µ–ª—å—é
# –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —Å Vision –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
VISION_SUPPORTED_MODELS = ["gpt-4-vision-preview", "gpt-4o", "gpt-4o-mini", "gpt-4-turbo"]
# –ü–ª—é—Å –≤—Å–µ o4-–º–æ–¥–µ–ª–∏ (reasoning –º–æ–¥–µ–ª–∏ —Å Vision)
VISION_SUPPORTED_PREFIXES = ["o4-"]

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Vision
vision_supported = (
    any(model in OPENAI_MODEL for model in VISION_SUPPORTED_MODELS) or
    any(OPENAI_MODEL.startswith(prefix) for prefix in VISION_SUPPORTED_PREFIXES)
)

if VISION_ENABLED and not vision_supported:
    print(f"‚ö†Ô∏è  –ú–æ–¥–µ–ª—å {OPENAI_MODEL} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
    print(f"üìã Vision –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç: {', '.join(VISION_SUPPORTED_MODELS)} –∏ o4-* –º–æ–¥–µ–ª–∏")
    print("üîß –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    VISION_ENABLED = False

# –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–æ–≤
if any(OPENAI_MODEL.startswith(prefix) for prefix in ['o1-', 'o3-', 'o4-']) and EFFECTIVE_MAX_TOKENS < 1000:
    print(f"‚ö†Ô∏è  –î–ª—è reasoning-–º–æ–¥–µ–ª–∏ {OPENAI_MODEL} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è max_tokens >= 5000")
    print(f"üìã –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {EFFECTIVE_MAX_TOKENS}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è
MODULE_CONFIG = {
    # ChatGPT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    'api_key': OPENAI_API_KEY,
    'model': OPENAI_MODEL,
    'max_tokens': EFFECTIVE_MAX_TOKENS,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    'original_max_tokens': OPENAI_MAX_TOKENS,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    'max_completion_tokens': OPENAI_MAX_COMPLETION_TOKENS,  # –î–ª—è o1-–º–æ–¥–µ–ª–µ–π
    'temperature': OPENAI_TEMPERATURE,
    'timeout': 30,  # —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    
    # Whisper –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    'whisper_mode': WHISPER_MODE,
    'whisper_model': WHISPER_MODEL,
    'local_whisper_model': LOCAL_WHISPER_MODEL,
    'whisper_language': WHISPER_LANGUAGE,
    
    # –ê—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    'max_audio_size_mb': MAX_AUDIO_SIZE_MB,
    'max_audio_duration_sec': MAX_AUDIO_DURATION_SEC,
    'audio_temp_dir': AUDIO_TEMP_DIR,
    'auto_cleanup_temp_files': AUTO_CLEANUP_TEMP_FILES,
    
    # Vision API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    'vision_enabled': VISION_ENABLED,
    'vision_quality': VISION_QUALITY,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ vision_detail
    'max_image_size_mb': MAX_IMAGE_SIZE_MB,
    'image_quality': IMAGE_QUALITY,  # –î–æ–±–∞–≤–ª–µ–Ω–æ: –∫–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è JPEG
    'max_image_resolution': MAX_IMAGE_RESOLUTION,
    'vision_cost_warnings': VISION_COST_WARNINGS,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ show_cost_warnings
    
    # Mem0 –ø–∞–º—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    'mem0_enabled': MEM0_ENABLED,
    'mem0_api_key': MEM0_API_KEY,
}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
TEMP_AUDIO_PATH = module_dir / AUDIO_TEMP_DIR
TEMP_AUDIO_PATH.mkdir(exist_ok=True)

# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª–µ
MODULE_CONFIG['temp_audio_path'] = TEMP_AUDIO_PATH 