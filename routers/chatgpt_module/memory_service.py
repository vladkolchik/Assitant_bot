"""
Mem0 Memory Service –¥–ª—è ChatGPT –º–æ–¥—É–ª—è
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import os
import time
from typing import List, Dict, Optional, Union, Any

try:
    from mem0 import MemoryClient  # type: ignore
except ImportError:
    MemoryClient = None
    
from .config import MODULE_CONFIG

class Mem0MemoryService:
    """–°–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏ –Ω–∞ –±–∞–∑–µ Mem0"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        api_key = os.getenv("MEM0_API_KEY")
        if not api_key or MemoryClient is None:
            print("‚ö†Ô∏è  MEM0_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env –∏–ª–∏ mem0 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("üìã –î–æ–±–∞–≤—å—Ç–µ MEM0_API_KEY=your-key –≤ .env —Ñ–∞–π–ª –º–æ–¥—É–ª—è")
            print("üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install mem0ai")
            self.client = None
            self.enabled = False
        else:
            self.client = MemoryClient(api_key=api_key)
            self.enabled = True
            print("‚úÖ Mem0 –ø–∞–º—è—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def add_conversation(self, user_id: str, messages: List[Dict[str, str]]) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π [{"role": "user/assistant", "content": "..."}]
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        """
        if not self.enabled:
            return False
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Mem0
            if self.client is None:
                return False
            result = self.client.add(messages, user_id=user_id)
            
            print(f"üíæ –ü–∞–º—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Mem0: {e}")
            return False
    
    async def search_relevant_memories(self, user_id: str, query: str, limit: int = 5) -> str:
        """
        –ò—â–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query: –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å/–≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏
        """
        if not self.enabled or self.client is None:
            return ""
        
        try:
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            memories = self.client.search(query, user_id=user_id, limit=limit)
            
            # print(f"üîç –û–¢–õ–ê–î–ö–ê - –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            # print(f"üîç –û–¢–õ–ê–î–ö–ê - –ù–∞–π–¥–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(memories) if memories else 0}")
            
            # if memories:
            #     for i, memory in enumerate(memories):
            #         print(f"üîç –û–¢–õ–ê–î–ö–ê - –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ {i+1}: {memory}")
            
            if not memories:
                return ""
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è ChatGPT
            context_parts = []
            for memory in memories:
                # Mem0 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–µ–º 'memory'
                memory_text = memory.get('memory', str(memory))
                context_parts.append(f"‚Ä¢ {memory_text}")
            
            context = "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤:\n" + "\n".join(context_parts)
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(memories)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è {user_id}")
            return context
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Mem0: {e}")
            return ""
    
    async def get_user_profile(self, user_id: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –ö—Ä–∞—Ç–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not self.enabled or self.client is None:
            return ""
        
        try:
            # –ò—â–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            profile_memories = self.client.search(
                "profile preferences about user", 
                user_id=user_id, 
                limit=10
            )
            
            if not profile_memories:
                return ""
            
            profile_parts = []
            for memory in profile_memories:
                memory_text = memory.get('memory', str(memory))
                profile_parts.append(memory_text)
            
            profile = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n" + "\n".join(profile_parts)
            return profile
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return ""
    
    async def clear_user_memory(self, user_id: str) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –≤—Å—é –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—á–∏—â–µ–Ω–æ
        """
        if not self.enabled or self.client is None:
            return False
        
        try:
            # Mem0 API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.client.delete_all(user_id=user_id)
            print(f"üóëÔ∏è –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return False
    
    def get_memory_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        if not self.enabled:
            return {"enabled": False, "error": "Mem0 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–µ—Å–ª–∏ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
            return {
                "enabled": True,
                "provider": "Mem0",
                "status": "–ê–∫—Ç–∏–≤–Ω–æ"
            }
        except Exception as e:
            return {"enabled": True, "error": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø–∞–º—è—Ç–∏
memory_service = Mem0MemoryService() 