from aiogram import Router, types
from aiogram.types import CallbackQuery, Message
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest
from config import ALLOWED_USER_IDS
from .config import GMAIL_ADDRESS, DEFAULT_EMAIL_RECIPIENT
from .messages import MESSAGES  # –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
from messages import MESSAGES as GLOBAL_MESSAGES  # –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
from .services import send_email_oauth2, get_auth_status, is_authorized
from .keyboards import get_email_menu, get_recipient_menu
import re
import asyncio
from aiogram import F

email_router = Router()

user_states = {}
default_recipient = DEFAULT_EMAIL_RECIPIENT

def is_valid_email(email):
    return re.match(r"[^@\s]+@[^@\s]+\.[a-zA-Z]{2,}", email)

# –ö–æ–º–∞–Ω–¥—ã /start –∏ /menu –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ core –º–æ–¥—É–ª—å –¥–ª—è –ª—É—á—à–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

@email_router.callback_query(F.data.in_({
    "email_mode", "reset_draft", "exit_email_mode", "recipient_menu", 
    "edit_recipient", "reset_recipient", "back_to_email_menu", "show_attachments"
}))
async def menu_handler(callback: CallbackQuery):
    if not callback or not getattr(callback, 'from_user', None):
        return
    from_user = callback.from_user
    if not from_user or not hasattr(from_user, 'id'):
        return
    user_id = from_user.id
    data = callback.data
    if user_id not in user_states or "email_router" not in user_states[user_id]:
        user_states[user_id] = {}
        user_states[user_id]["email_router"] = {"mode": "default", "recipient": None, "draft": {}, "files": []}
    state = user_states[user_id]["email_router"]

    if data == "email_mode":
        state["mode"] = "email"
        # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ email —Ä–µ–∂–∏–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        recipient = state["recipient"] or default_recipient
        files_count = len(state.get("files", []))
        
        msg = MESSAGES["enter_email_mode"]
        msg += "\n\n" + "‚îÄ" * 30
        msg += f"\nüìß <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {recipient}"
        msg += f"\nüóÇ <b>–§–∞–π–ª–æ–≤ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ:</b> {files_count}"
        
        if files_count > 0:
            msg += " ‚ö†Ô∏è"
        
        try:
            if callback.message:
                await callback.message.edit_text(msg, reply_markup=get_email_menu())  # type: ignore
        except TelegramBadRequest:
            await callback.answer("‚ÑπÔ∏è –£–∂–µ –≤ —Ä–µ–∂–∏–º–µ email", show_alert=False)
    elif data == "reset_draft":
        state["draft"] = {}
        state["files"] = []
        if callback.message:
            await callback.message.edit_text("üóë –ß–µ—Ä–Ω–æ–≤–∏–∫ –∏ –≤–ª–æ–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.", reply_markup=get_email_menu())  # type: ignore
    elif data == "exit_email_mode":
        state["mode"] = "default"
        # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ —Ñ–∞–π–ª—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ email —Ä–µ–∂–∏–º–∞
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        back_to_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        if callback.message:
            await callback.message.edit_text(MESSAGES["exit_email_mode"], reply_markup=back_to_menu)  # type: ignore
    elif data == "recipient_menu":
        current = state["recipient"] or default_recipient
        msg = f"üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º:\n\nüì® –¢–µ–∫—É—â–∏–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å: <b>{current}</b>"
        
        try:
            if callback.message:
                await callback.message.edit_text(msg, reply_markup=get_recipient_menu(), parse_mode='HTML')  # type: ignore
        except TelegramBadRequest:
            await callback.answer("‚ÑπÔ∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è", show_alert=False)

    elif data == "edit_recipient":
        state["mode"] = "entering_email"
        if callback.message:
            await callback.message.edit_text(MESSAGES["ask_recipient"], reply_markup=get_recipient_menu())  # type: ignore
    elif data == "reset_recipient":
        state["recipient"] = None
        if callback.message:
            await callback.message.edit_text(MESSAGES["recipient_reset"], reply_markup=get_recipient_menu())  # type: ignore
    elif data == "back_to_email_menu":
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        recipient = state["recipient"] or default_recipient
        files_count = len(state.get("files", []))
        
        msg = MESSAGES["enter_email_mode"]
        msg += "\n\n" + "‚îÄ" * 30
        msg += f"\nüìß <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {recipient}"
        msg += f"\nüóÇ <b>–§–∞–π–ª–æ–≤ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ:</b> {files_count}"
        
        if files_count > 0:
            msg += " ‚ö†Ô∏è"
        
        if callback.message:
            await callback.message.edit_text(msg, reply_markup=get_email_menu(), parse_mode='HTML')  # type: ignore
    elif data == "show_attachments":
        files = state.get("files", [])
        if not files:
            msg = "üìé –í–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            msg = f"üìé –í–ª–æ–∂–µ–Ω–∏—è ({len(files)}):\n" + "\n".join([f"- {f[0]}" for f in files])
        
        try:
            if callback.message:
                await callback.message.edit_text(msg, reply_markup=get_email_menu())  # type: ignore
        except TelegramBadRequest:
            await callback.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞", show_alert=False)

    user_states[user_id]["email_router"] = state
    await callback.answer()

@email_router.message()
async def handle_input(message: Message):
    if not message or not getattr(message, 'from_user', None):
        return
    from_user = message.from_user
    if not from_user or not hasattr(from_user, 'id'):
        return
    user_id = from_user.id
    if user_id not in ALLOWED_USER_IDS:
        await message.answer(GLOBAL_MESSAGES["no_access"])
        return
    if user_id not in user_states or "email_router" not in user_states[user_id]:
        user_states[user_id] = {}
        user_states[user_id]["email_router"] = {"mode": "default", "recipient": None, "draft": {}, "files": []}
    state = user_states[user_id]["email_router"]

    text = message.text.strip() if message.text else ""

    if state["mode"] == "entering_email":
        if is_valid_email(text):
            state["recipient"] = text
            state["mode"] = "email"
            await message.answer(MESSAGES["recipient_saved"].format(email=text), reply_markup=get_email_menu())
        else:
            await message.answer(MESSAGES["invalid_email"])
    elif state["mode"] == "email":
        if message.document:
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ Telegram
                if message.bot and message.document:
                    file_stream = await message.bot.download(message.document)  # type: ignore
                    if file_stream:
                        file_bytes = file_stream.read()  # type: ignore  # –ß–∏—Ç–∞–µ–º –≤—Å–µ –±–∞–π—Ç—ã
                        file_stream.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫
                        file_name = message.document.file_name or f"document_{message.document.file_unique_id}"
                    else:
                        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
                        return
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç")
                    return
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                return
            
            if message.caption:
                lines = message.caption.strip().splitlines()
                if len(lines) >= 2:
                    # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    await asyncio.sleep(2)
                    
                    subject = lines[0]
                    body = "\n".join(lines[1:])
                    recipient = state["recipient"] or default_recipient
                    attachments = state["files"] + [(file_name, file_bytes)]
                    success, error_msg = send_email_oauth2(recipient, subject, body, attachments)
                    if success:
                        await message.answer("‚úÖ –ü–∏—Å—å–º–æ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                    else:
                        await message.answer(f"{MESSAGES['email_failed']}\n‚ùå {error_msg}")
                    state["draft"] = {}
                    state["files"] = []
                    user_states[user_id]["email_router"] = state
                    return
                else:
                    await message.answer(MESSAGES["invalid_format"])
                    return
            else:
                state["files"].append((file_name, file_bytes))
                await message.answer(f"üìé –§–∞–π–ª ¬´{file_name}¬ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω.")
        elif message.photo:
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
            photo = message.photo[-1]
            try:
                if message.bot:
                    file_stream = await message.bot.download(photo)  # type: ignore
                    if file_stream:
                        file_bytes = file_stream.read()  # type: ignore
                        file_stream.close()
                        file_name = f"screenshot_{photo.file_unique_id}.jpg"
                    else:
                        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
                        return
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç")
                    return
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
                return
            
            if message.caption:
                lines = message.caption.strip().splitlines()
                if len(lines) >= 2:
                    # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    await asyncio.sleep(2)
                    
                    subject = lines[0]
                    body = "\n".join(lines[1:])
                    recipient = state["recipient"] or default_recipient
                    attachments = state["files"] + [(file_name, file_bytes)]
                    success, error_msg = send_email_oauth2(recipient, subject, body, attachments)
                    if success:
                        await message.answer("‚úÖ –ü–∏—Å—å–º–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                    else:
                        await message.answer(f"{MESSAGES['email_failed']}\n‚ùå {error_msg}")
                    state["draft"] = {}
                    state["files"] = []
                    user_states[user_id]["email_router"] = state
                    return
                else:
                    await message.answer(MESSAGES["invalid_format"])
                    return
            else:
                state["files"].append((file_name, file_bytes))
                await message.answer(f"üìé –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ¬´{file_name}¬ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ.")
        elif not state["draft"] and message.text:
            lines = text.splitlines()
            if len(lines) >= 2:
                # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await asyncio.sleep(2)
                
                subject = lines[0]
                body = "\n".join(lines[1:])
                recipient = state["recipient"] or default_recipient
                success, error_msg = send_email_oauth2(recipient, subject, body, state["files"])
                if success:
                    if state["files"]:
                        await message.answer("‚úÖ –ü–∏—Å—å–º–æ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                    else:
                        await message.answer("‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                else:
                    await message.answer(f"{MESSAGES['email_failed']}\n‚ùå {error_msg}")
                state["draft"] = {}
                state["files"] = []
            else:
                await message.answer(MESSAGES["invalid_format"])
        else:
            await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ –∏–ª–∏ –Ω–∞—á–∞–ª–∏ –Ω–æ–≤–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ú–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å.")

    else:
        await message.answer(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")

    user_states[user_id]["email_router"] = state 