from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from typing import cast
from .messages import MESSAGES
from .config import API_KEY, SERVICE_URL, IS_CONFIGURED

api_example_router = Router()

@api_example_router.callback_query(F.data == "api_example_mode")
async def activate_api_example(callback: CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ API –º–æ–¥—É–ª—è"""
    
    if not callback.message:
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
    if not IS_CONFIGURED:
        await callback.message.edit_text(MESSAGES["not_configured"])  # type: ignore
        await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º API –∫–ª—é—á –¥–ª—è –ø–æ–∫–∞–∑–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞ + ***)
    api_key_masked = f"{API_KEY[:4]}***" if API_KEY and len(API_KEY) > 4 else "***"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_message = MESSAGES["configured"].format(
        api_key_masked=api_key_masked,
        service_url=SERVICE_URL
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì° –¢–µ—Å—Ç API", callback_data="api_test")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="api_settings")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(config_message, reply_markup=keyboard)  # type: ignore
    await callback.answer("API –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤!")

@api_example_router.callback_query(F.data == "api_test")
async def test_api_call(callback: CallbackQuery):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞"""
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –º–æ–¥—É–ª–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã HTTP –∑–∞–ø—Ä–æ—Å
    # async with httpx.AsyncClient() as client:
    #     response = await client.get(
    #         SERVICE_URL,
    #         headers={'Authorization': f'Bearer {API_KEY}'},
    #         timeout=MODULE_CONFIG['timeout']
    #     )
    
    await callback.message.edit_text(MESSAGES["demo_api_call"])
    await callback.answer("API –≤—ã–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω!")

@api_example_router.callback_query(F.data == "api_settings")
async def show_api_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥—É–ª—è"""
    
    settings_text = f"""üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –º–æ–¥—É–ª—è:

üîë API –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
üåê URL —Å–µ—Ä–≤–∏—Å–∞: {SERVICE_URL}
üìÅ –ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª: routers/api_example_module/.env

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –º–æ–¥—É–ª—è."""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="api_example_mode")]
    ])
    
    await callback.message.edit_text(settings_text, reply_markup=keyboard)
    await callback.answer()

@api_example_router.message(F.text.contains("api"))
async def handle_api_mention(message: Message):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ 'api' –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    await message.reply("üåê –í—ã —É–ø–æ–º—è–Ω—É–ª–∏ API! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ API Example –º–æ–¥—É–ª—å –∏–∑ –º–µ–Ω—é.") 