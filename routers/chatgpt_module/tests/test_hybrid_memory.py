#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π –ø–∞–º—è—Ç–∏ ChatGPT –º–æ–¥—É–ª—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è Mem0 –∏ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
"""

import sys
import os
import asyncio
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

from routers.chatgpt_module.memory_service import HybridMemoryService
from routers.chatgpt_module.config import MODULE_CONFIG

async def test_hybrid_memory():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–∏–±—Ä–∏–¥–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    print("üß™ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π –ø–∞–º—è—Ç–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏
    memory_service = HybridMemoryService()
    test_user_id = "test_user_456"
    
    print(f"\nüìä –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–∞–º—è—Ç–∏: {MODULE_CONFIG.get('mem0_enabled', False)}")
    stats = memory_service.get_memory_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {stats}")
    
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –≥–∏–±—Ä–∏–¥–Ω—É—é –ø–∞–º—è—Ç—å:")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
    dialogues = [
        ("–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π", "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –ê–ª–µ–∫—Å–µ–π!"),
        ("–Ø —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º", "–ó–¥–æ—Ä–æ–≤–æ! –ö–∞–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å?"),
        ("–ò—Å–ø–æ–ª—å–∑—É—é Python –∏ JavaScript", "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –≠—Ç–æ –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏."),
        ("–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è?", "–Ø –Ω–µ –º–æ–≥—É —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É, –Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏."),
        ("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å, –ê–ª–µ–∫—Å–µ–π."),
    ]
    
    for user_msg, bot_response in dialogues:
        await memory_service.save_conversation(test_user_id, user_msg, bot_response)
        print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –¥–∏–∞–ª–æ–≥: '{user_msg}' -> '{bot_response}'")
    
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    test_queries = [
        "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
        "–ö–∞–∫–∞—è —É –º–µ–Ω—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è?",
        "–ß—Ç–æ —è –≥–æ–≤–æ—Ä–∏–ª –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?",
        "–û–±—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä"
    ]
    
    for query in test_queries:
        print(f"\n  üîç –ó–∞–ø—Ä–æ—Å: '{query}'")
        context, count, source = await memory_service.get_full_context(test_user_id, query)
        
        if context:
            print(f"  üìù –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ {source} –ø–∞–º—è—Ç–∏")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            context_lines = context.split('\n')[:3]
            for line in context_lines:
                if line.strip():
                    print(f"    {line[:100]}{'...' if len(line) > 100 else ''}")
        else:
            print(f"  üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏:")
    
    # –°–µ—Å—Å–∏–æ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    session_stats = memory_service.get_session_memory_stats(test_user_id)
    print(f"  üìä –°–µ—Å—Å–∏–æ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å: {session_stats}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    system_stats = memory_service.get_memory_stats()
    print(f"  üìä –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏: {system_stats}")
    
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–π –ø–∞–º—è—Ç–∏:")
    
    # –û—á–∏—â–∞–µ–º –≤—Å—é –ø–∞–º—è—Ç—å
    success = await memory_service.clear_all_memory(test_user_id)
    print(f"  üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏
    context_after_clear, count_after, source_after = await memory_service.get_full_context(test_user_id, "—Ç–µ—Å—Ç")
    session_stats_after = memory_service.get_session_memory_stats(test_user_id)
    
    print(f"  üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {'–ø—É—Å—Ç' if not context_after_clear else '–æ—Å—Ç–∞–ª—Å—è'}")
    print(f"  üìä –°–µ—Å—Å–∏–æ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {session_stats_after}")
    
    if not context_after_clear and session_stats_after['messages_count'] == 0:
        print("  ‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è –ø–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
    else:
        print("  ‚ö†Ô∏è  –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Mem0)")
    
    print("\nüéâ –¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(test_hybrid_memory()) 